# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("centos7", "pass"), worker.Worker("ubuntu20", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
# c['protocols'] = {'pb': {'port': 9989}}
c['protocols'] = {"pb": {"port": "tcp:9989:interface=127.0.0.1"}}

# Define all projects

PROJECTS = [
            {
             "name": "test1",
             "repo": "https://github.com/droopp/test1.git"
            },
            {
             "name": "test2",
             "repo": "https://github.com/droopp/test2.git"
            },
         ]

BRANCHES = ['master', 'develop']


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []

for p in PROJECTS:

    c['change_source'].append(changes.GitPoller(
                    repourl=p["repo"],
                    project=p["name"],
                    branches=BRANCHES,
                    workdir=p["name"],
                    pollInterval=180))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

for p in PROJECTS:
    for b in BRANCHES:

        c['schedulers'].append(
                schedulers.SingleBranchScheduler(
                        name = "{}-{}-rpm".format(p["name"], b),
                        builderNames = ['{}-{}-builder-rpm'.format(p["name"], b)],
                        change_filter = util.ChangeFilter(
                                project = p["name"],
                                branch  = b
                        )
                )
          )

        c['schedulers'].append(
                schedulers.ForceScheduler(
                        name = "{}-{}-rpm-force".format(p["name"], b),
                        builderNames = ['{}-{}-builder-rpm'.format(p["name"], b)],

                        codebases=[util.CodebaseParameter(
                          "",
                          repository = util.FixedParameter(name="repository", default=p["repo"]),
                          project = util.FixedParameter(name="project", default=p["name"]),
                          branch = util.FixedParameter(name="branch", default=b)
                        )]

                )
          )


        c['schedulers'].append(
                schedulers.SingleBranchScheduler(
                        name = "{}-{}-deb".format(p["name"], b),
                        builderNames = ['{}-{}-builder-deb'.format(p["name"], b)],
                        change_filter = util.ChangeFilter(
                                project = p["name"],
                                branch  = b
                        )
                )
          )


        c['schedulers'].append(
                schedulers.ForceScheduler(
                        name = "{}-{}-deb-force".format(p["name"], b),
                        builderNames = ['{}-{}-builder-deb'.format(p["name"], b)],

                        codebases=[util.CodebaseParameter(
                          "",
                          repository = util.FixedParameter(name="repository", default=p["repo"]),
                          project = util.FixedParameter(name="project", default=p["name"]),
                          branch = util.FixedParameter(name="branch", default=b)
                        )]
                )
          )


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

for p in PROJECTS:
    for b in BRANCHES:

        # centos builder

        cmd = "./build.sh centos7 droopp {} {} 0.1.0 rpm".format(p["name"], b)

        factory = util.BuildFactory()
        factory.addStep(steps.ShellCommand(command=cmd.split(" "), workdir="/home/buildbot/source/cicd"))

        c['builders'].append(
            util.BuilderConfig(name="{}-{}-builder-rpm".format(p["name"], b),
              workernames=["centos7"],
              factory=factory))

        # debian builder

        cmd = "./build.sh ubuntu20 droopp {} {} 0.1.0 deb".format(p["name"], b)

        factory = util.BuildFactory()
        factory.addStep(steps.ShellCommand(command=cmd.split(" "), workdir="/home/buildbot/source/cicd"))

        c['builders'].append(
            util.BuilderConfig(name="{}-{}-builder-deb".format(p["name"], b),
              workernames=["ubuntu20"],
              factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "DROP"
c['titleURL'] = "https://dropfaas.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://134.122.23.140/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['admin'])
        ]
)

c['www']['auth'] = util.UserPasswordAuth([('admin','Admin123!')])


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
